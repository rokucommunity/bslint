{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "JSON schema for bslint.json",
    "type": "object",
    "properties": {
        "rules": {
            "description": "BSLint comes with a preset number of lint rules which are organized in 3 categories \"Code style\", \"Strictness\", \"Code flow\"",
            "type": "object",
            "allOf": [
                {
                  "$ref": "#/definitions/rules-code-style"
                },
                {
                  "$ref": "#/definitions/rules-strictness"
                },
                {
                  "$ref": "#/definitions/rules-code-flow"
                }
            ]
        },
        "globals": {
            "description": "A list of tokens which should always be considered as safe (ex. `_brs_`)",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "ignores": {
            "description": "Tell BSLint to ignore specific files and directories. Each value should use a \"glob search\" pattern as supported by minimatch npm module.",
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "definitions": {
        "rule": {
            "oneOf": [
              {
                "description": "BSLint rule\n\n\"off\" - turns the rule off\n\"info\" - turn the rule on for logging (doesn't affect exit code)\n\"warn\" - turn the rule on as a warning (doesn't affect exit code)\n\"error\" - turn the rule on as an error (exit code is 1 when triggered)\n",
                "type": "string",
                "enum": ["off", "info", "warn", "error"]
              }
            ]
        },
        "rule-inline-if-style": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"never\" - do not allow\n\"no-then\" - do not use then keyword\n\"then\" - always use then keyword\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["never", "no-then", "then", "off"]
                }
            ]
        },
        "rule-block-if-style": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"no-then\" - do not use then keyword\n\"then\" - always use then keyword\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["no-then", "then", "off"]
                }
            ]
        },
        "rule-condition-style": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"no-group\" - do not wrap with parenthesis\n\"group\" - always wrap with parentheses\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["no-group", "group", "off"]
                }
            ]
        },
        "rule-named-function-style": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"no-function\" - always use sub\n\"no-sub\" - always use function\n\"auto\" - use sub for Void functions, otherwise use function\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["no-function", "no-sub", "auto", "off"]
                }
            ]
        },
        "rule-aa-comma-style": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"always\" - enforce the presence of commas always\n\"no-dangling\" - enforce the presence of commas but don't leave one dangling\n\"never\" - enforce that optional commas aren't used\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["always", "no-dangling", "never", "off"]
                }
            ]
        },
        "rule-todo-pattern": {
            "oneOf": [
                {
                    "description": "Regex pattern that matches inline TODO references",
                    "type": "string"
                }
            ]
        },
        "rule-eol-last": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"always\" - enforces that files end with a newline\n\"never\" - enforces that files do not end with a newline\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["always", "never", "off"]
                }
            ]
        },
        "rule-color-format": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"hash-hex\" - enforces all color values are type string or template string and use a # prefix\n\"quoted-numeric-hex\" - enforces all color values are type string or template string and use a 0x prefix\n\"never\" - enforces that no color values can be defined in the code-base (brs or bs files). Useful if you define colors in a separate stand-alone file. To use this option you would list your stand-alone file in the ignore list or diagnosticFilters\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["hash-hex", "quoted-numeric-hex", "never", "off"]
                }
            ]
        },
        "rule-color-case": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"lower\" - enforces all color values that are type string or template string and all lowercase. ie. #11bbdd\n\"upper\" - enforces all color values that are type string or template string and all uppercase. ie. #EEAA44\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["lower", "upper", "off"]
                }
            ]
        },
        "rule-color-alpha": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"always\" - enforces all color values that are type string or template string define an alpha value\n\"allowed\" - allows color values that are type string or template string to define an alpha value\n\"never\" - enforces that none of the color values that are type string or template string define an alpha value\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["always", "allowed", "never", "off"]
                }
            ]
        },
        "rule-color-alpha-defaults": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"allowed\" - allows both types of defaults to be used\n\"only-hidden\" - only allows opacity 0% (hidden) from being used\n\"never\" - enforces that no defaults can be used\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["allowed", "only-hidden", "never", "off"]
                }
            ]
        },
        "rule-color-cert": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"always\" - ensures all white and black color-format values either match or are darker/ lighter than the minimum recommended values. For white the maximum value is #EBEBEB and for black the minimum value is #161616\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["always", "off"]
                }
            ]
        },
        "rule-type-annotations": {
            "oneOf": [
                {
                    "description": "BSLint rule\n\n\"all\" - enforce both arguments and return type annotations\n\"return\" - enforce return type annotations\n\"args\" - enforce arguments type annotations\n\"off\" - do not validate\n",
                    "type": "string",
                    "enum": ["all", "return", "args", "off"]
                }
            ]
        },
        "rules-code-style": {
            "type": "object",
            "properties": {
                "inline-if-style": {
                    "$ref": "#/definitions/rule-inline-if-style",
                    "description": "Validation of inline if/then statements.",
                    "default": "then"
                },
                "block-if-style": {
                     "$ref": "#/definitions/rule-block-if-style",
                     "description": "Validation of regular block if/then statements.",
                     "default": "no-then"
                },
                "condition-style": {
                     "$ref": "#/definitions/rule-condition-style",
                     "description": "Validation of if/while statements conditions: should the condition be wrapped around parenthesis?",
                     "default": "no-group"
                },
                "named-function-style": {
                     "$ref": "#/definitions/rule-named-function-style",
                     "description": "Validation of function style (function/sub)",
                     "default": "auto"
                },
                "anon-function-style": {
                     "$ref": "#/definitions/rule-named-function-style",
                     "description": "Validation of function style (function/sub)",
                     "default": "auto"
                },
                "aa-comma-style": {
                     "$ref": "#/definitions/rule-aa-comma-style",
                     "description": "Validation of commas in Associative Array (AA) literals.",
                     "default": "no-dangling"
                },
                "no-print": {
                     "$ref": "#/definitions/rule",
                     "description": "Prevent usage of print statements in code.",
                     "default": "off"
                },
                "no-todo": {
                     "$ref": "#/definitions/rule",
                     "description": "Prevent usage of todo comments in code.",
                     "default": "off"
                },
                "todo-pattern": {
                     "$ref": "#/definitions/rule-todo-pattern",
                     "description": "String regex pattern to determine what a TODO is. default is TODO|todo|FIXME (do not include surrounding / characters).",
                     "default": "TODO|todo|FIXME"
                },
                "no-stop": {
                     "$ref": "#/definitions/rule",
                     "description": "Prevent usage of STOP statements in the code.",
                     "default": "warn"
                },
                "eol-last": {
                     "$ref": "#/definitions/rule-eol-last",
                     "description": "Enforces at least one newline (or absence thereof) at the end of non-empty files.",
                     "default": "always"
                },
                "color-format": {
                     "$ref": "#/definitions/rule-color-format",
                     "description": "Ensures that all the color values follow the same prefix formatting. Can also use to prevent any colors values from being defined in the code-base (brs or bs files), except for values in a stand-alone file (ie. theme file).",
                     "default": "off"
                },
                "color-case": {
                     "$ref": "#/definitions/rule-color-case",
                     "description": "Ensures that all color values follow the same case. Requires that color-format is set to hash-hex or quoted-numeric-hex.",
                     "default": "off"
                },
                "color-alpha": {
                     "$ref": "#/definitions/rule-color-alpha",
                     "description": "Defines the usage of the color alpha value. ie. #xxxxxxFF. Requires that color-format is set to hash-hex or quoted-numeric-hex.",
                     "default": "off"
                },
                "color-alpha-defaults": {
                     "$ref": "#/definitions/rule-color-alpha-defaults",
                     "description": "Enforces default color-alpha values. ie. #xxxxxxFF or #xxxxxx00. Requires that color-alpha is not set to off and color-format is set to hash-hex or quoted-numeric-hex.",
                     "default": "off"
                },
                "color-cert": {
                     "$ref": "#/definitions/rule-color-cert",
                     "description": "Enforces Roku's broadcast safe color 6.4 certification requirement. Requires that color-format is set to hash-hex or quoted-numeric-hex.",
                     "default": "off"
                }
            }

        },
        "rules-strictness": {
            "type": "object",
            "properties": {
                "type-annotations": {
                    "$ref": "#/definitions/rule-type-annotations",
                    "description": "Validation of presence of as type annotations, for function arguments and return values..",
                    "default": "off"
                }
            }

        },
        "rules-code-flow": {
            "type": "object",
            "properties": {
                "assign-all-paths": {
                     "$ref": "#/definitions/rule",
                     "description": "A variable is not assigned in all the possible code paths.",
                     "default": "error"
                },
                "unsafe-path-loop": {
                     "$ref": "#/definitions/rule",
                     "description": "Loops are considered as unsafe code paths: assignment in a loop may not happen.",
                     "default": "error"
                },
                "unsafe-iterators": {
                     "$ref": "#/definitions/rule",
                     "description": "Loop iterator variable should not be used outside a loop.",
                     "default": "error"
                },
                "case-sensitivity": {
                     "$ref": "#/definitions/rule",
                     "description": "Inform of inconsistent variable casing.",
                     "default": "warn"
                },
                "unused-variable": {
                     "$ref": "#/definitions/rule",
                     "description": "Inform of variable being set but never used.",
                     "default": "warn"
                },
                "unreachable-code": {
                     "$ref": "#/definitions/rule",
                     "description": "Inform of unreachable code.",
                     "default": "info"
                },
                "consistent-return": {
                     "$ref": "#/definitions/rule",
                     "description": "Verifies consistency of sub/function returned values (missing return, missing value, returned value while function is as void,...).",
                     "default": "error"
                }
            }

        }
    }

}